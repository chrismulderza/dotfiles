# set colorful prompt (PS1 doesn't support the color variables set above)

GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWUNTRACKEDFILES=true
GIT_PS1_STATESEPARATOR="|"

PROMPT_HOST="\H"
SCM_PROMPT_DIRTY="${BrightRed}!${ResetColor}"
SCM_PROMPT_CLEAN="${BrightGreen}+${ResetColor}"
SCM_PROMPT_PREFIX=""
SCM_PROMPT_SUFFIX=""

SCM_GIT="git"
SCM_GIT_CHAR="±"

SCM_SVN="svn"
SCM_SVN_CHAR="§"

SCM_NONE="NONE"
SCM_NONE_CHAR="-"

function scm {
if [[ -f .git/HEAD ]]; then SCM=$SCM_GIT
elif which git &> /dev/null && [[ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]]; then SCM=$SCM_GIT
elif [[ -d .svn ]]; then SCM=$SCM_SVN
else SCM=$SCM_NONE
fi
}

function scm_prompt_char {
if [[ -z $SCM ]]; then scm; fi
if [[ $SCM == $SCM_GIT ]]; then SCM_CHAR=$SCM_GIT_CHAR
elif [[ $SCM == $SCM_SVN ]]; then SCM_CHAR=$SCM_SVN_CHAR
else SCM_CHAR=$SCM_NONE_CHAR
fi
}

function scm_prompt_vars {
  scm
  scm_prompt_char
  SCM_DIRTY=0
  SCM_STATE=""
  [[ $SCM == $SCM_GIT ]] && git_prompt_vars && return
  [[ $SCM == $SCM_SVN ]] && svn_prompt_vars && return
}

function scm_prompt_info {
scm
scm_prompt_char
SCM_DIRTY=0
SCM_STATE=""
[[ $SCM == $SCM_GIT ]] && git_prompt_info && return
[[ $SCM == $SCM_SVN ]] && svn_prompt_info && return
}

function git_prompt_vars {

  SCM_GIT_AHEAD=""
  SCM_GIT_BEHIND=""
  SCM_GIT_STASH=""
  local status="$(git status -bs --porcelain 2> /dev/null)"
  if [[ -n "$(grep -v ^# <<< "${status}")" ]]; then
    SCM_DIRTY=1
    SCM_STATE=${GIT_PROMPT_DIRTY:-$SCM_PROMPT_DIRTY}
  else
    SCM_DIRTY=0
    SCM_STATE=${GIT_PROMPT_CLEAN:-$SCM_PROMPT_CLEAN}
  fi
  SCM_PREFIX=${GIT_PROMPT_PREFIX:-$SCM_PROMPT_PREFIX}
  SCM_SUFFIX=${GIT_PROMPT_SUFFIX:-$SCM_PROMPT_SUFFIX}

  local ref=$(git symbolic-ref -q --short HEAD 2> /dev/null)
  if [[ -n "$ref" ]]; then
    SCM_BRANCH=$ref
    SCM_IS_BRANCH=1
    SCM_IS_TAG=0
  else
    SCM_BRANCH=$(git describe --tags --exact-match 2> /dev/null)
    SCM_IS_TAG=1
    SCM_IS_BRANCH=0
  fi
  # SCM_BRANCH=$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match 2> /dev/null)
  SCM_CHANGE=$(git rev-parse HEAD 2>/dev/null)
  local ahead_re='.+ahead ([0-9]+).+'
  local behind_re='.+behind ([0-9]+).+'
  [[ "${status}" =~ ${ahead_re} ]] && SCM_GIT_AHEAD=" ${SCM_GIT_AHEAD_CHAR}${BASH_REMATCH[1]}"
  [[ "${status}" =~ ${behind_re} ]] && SCM_GIT_BEHIND=" ${SCM_GIT_BEHIND_CHAR}${BASH_REMATCH[1]}"
  local stash_count="$(git stash list 2> /dev/null | wc -l | tr -d ' ')"
  [[ "${stash_count}" -gt 0 ]] && SCM_GIT_STASH=" {${stash_count}}"
}

function svn_prompt_vars { 
  if [[ -n $(svn status 2> /dev/null) ]]; then
    SCM_DIRTY=1
    SCM_STATE=${SVN_PROMPT_DIRTY:-$SCM_PROMPT_DIRTY}
  else
    SCM_DIRTY=0
    SCM_STATE=${SVN_PROMPT_CLEAN:-$SCM_PROMPT_CLEAN}
  fi
  SCM_PREFIX=${SVN_PROMPT_PREFIX:-$SCM_PROMPT_PREFIX}
  SCM_SUFFIX=${SVN_PROMPT_SUFFIX:-$SCM_PROMPT_SUFFIX}
  SCM_BRANCH=$(svn info 2> /dev/null | awk -F/ '/^URL:/ { for (i=0; i<=NF; i++) { if ($i == "branches" || $i == "tags" ) { print $(i+1); break }; if ($i == "trunk") { print $i; break } } }') || return
  SCM_CHANGE=$(svn info 2> /dev/null | sed -ne 's#^Revision: ##p' )
}


# backwards-compatibility
function git_prompt_info {
  git_prompt_vars
  echo -e "$SCM_PREFIX$SCM_BRANCH$SCM_STATE$SCM_SUFFIX" 
}

function svn_prompt_info {
  svn_prompt_vars
  echo -e "$SCM_PREFIX$SCM_BRANCH$SCM_STATE$SCM_SUFFIX" 
}

function scm_char {
  scm_prompt_char
  echo -e "$SCM_CHAR" 
}

function prompt_char {
  scm_char 
}

case $TERM in
  xterm*)
    TITLEBAR="\[\033]0;\w\007\]"
    ;;
  *)
    TITLEBAR=""
    ;;
esac


USER_FORMAT="${BrightBlue}\u"
ROOT_FORMAT="${BrightRed}\u"
PT_START="${BrightWhite}("
PT_END="${BrightWhite})"

user_prompt() {
  if [[ ${EUID} == 0 ]]; then
    echo ${ROOT_FORMAT}
  else
    echo ${USER_FORMAT}
  fi
}

scm_prompt() {
  CHAR=$(scm_char)
  if [ $CHAR = $SCM_NONE_CHAR ]
  then
    return
  else
    echo "${PT_START}$(scm_char)${PT_END}-${PT_START}$(scm_prompt_info)${PT_END}"
  fi
}

prompt_command() {
  if [ $? -ne 0 ]
  then
    PS1="${TITLEBAR}${PT_START}$(user_prompt)${BrightWhite}@${BrightBlue}${PROMPT_HOST}${BrightWhite}:${Magenta}\w${PT_END}-${PT_START}
$(scm_prompt)-${PT_END}${PT_START}\$${PT_END} "
  else
    PS1="${TITLEBAR}${PT_START}$(user_prompt)${BrightWhite}@${BrightBlue}${PROMPT_HOST}${BrightWhite}:${Magenta}\w${PT_END}
$(scm_prompt)-${PT_START}\$${PT_END} "
  fi

}

#  PS1='\[\033[38;5;61m\]$(hostname) \[\033[38;5;33m\]\W\[\033[00;00m\]$(__git_ps1 " (%s)") \[\033[38;5;160m\]\$\[\033[00;00m\] '
#else
#  PS1='\[\033[38;5;61m\]$(hostname) \[\033[38;5;33m\]\W\[\033[00;00m\]$(__git_ps1 " (%s)") \n\$ '
#fi

#PS1="$BrightWhite($BrightBlue\u$BrightWhite@$BrightBlue\h$BrightWhite:$Magenta\w$BrightWhite)-$(__git_ps1)\n(\$)"

PROMPT_COMMAND=prompt_command
